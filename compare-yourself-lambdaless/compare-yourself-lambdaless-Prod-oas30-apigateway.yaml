openapi: "3.0.1"
info:
  title: "compare-yourself-lambdaless"
  description: "Compare Yourself API Lambdaless"
  version: "2021-12-28T06:45:01Z"
servers:
- url: "https://plwd238pc5.execute-api.eu-north-1.amazonaws.com/{basePath}"
  variables:
    basePath:
      default: "/Prod"
paths:
  /compare-yourself:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompareData"
        required: true
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - compare-yourself-user-pool: []
      x-amazon-apigateway-request-validator: "Validate body"
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: CompareYourselfAPIGatewayRole.Arn
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json:
            Fn::Sub:
              - "#set($userData=$input.path('$'))\n{\n    \"TableName\"\
                : \"${tableName}\",\n\
                \    \"Item\": {\n        \"UserId\": {\"S\": \"$context.authorizer.claims.sub\"\
                },\n        \"Age\": {\"N\": \"$userData.age\"},\n        \"Height\":\
                \ {\"N\": \"$userData.height\"},\n        \"Income\": {\"N\": \"$userData.income\"\
                }\n    }\n}"
              - tableName:
                  Ref: CompareYourselfTable
        passthroughBehavior: "when_no_templates"
        type: "aws"
    delete:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
      - compare-yourself-user-pool: []
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: CompareYourselfAPIGatewayRole.Arn
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:dynamodb:action/DeleteItem"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json:
            Fn::Sub:
              - "{\n  \"TableName\": \"${tableName}\"\
                ,\n  \"Key\": { \n    \"UserId\": {\"S\": \"$context.authorizer.claims.sub\"\
                }\n  }\n}"
              - tableName:
                  Ref: CompareYourselfTable
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /compare-yourself/single:
    get:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompareDataArray"
      security:
        - compare-yourself-user-pool: []
      x-amazon-apigateway-integration:
        credentials:
          Fn::GetAtt: CompareYourselfAPIGatewayRole.Arn
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:dynamodb:action/GetItem"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n[\n  {\n   \
                \ \"income\" : $inputRoot.Item.Income.N,\n    \"age\" : $inputRoot.Item.Age.N,\n\
                \    \"height\" : $inputRoot.Item.Height.N\n  }\n]"
        requestTemplates:
          application/json:
            Fn::Sub:
              - "{\n  \"TableName\": \"${tableName}\"\
                ,\n  \"Key\": { \n    \"UserId\": {\"S\": \"$context.authorizer.claims.sub\"\
                }\n  }\n}"
              - tableName:
                  Ref: CompareYourselfTable
        passthroughBehavior: "when_no_templates"
        type: "aws"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /compare-yourself/{type}:
    get:
      parameters:
      - name: "type"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CompareDataArray"
      security:
      - compare-yourself-user-pool: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetDataFunction.Arn}/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n[\n\n#foreach($elem\
                \ in $inputRoot)\n {\n  \"age\" : $elem.age,\n  \"height\" : $elem.height,\n\
                \  \"income\" : $elem.income\n} \n#if($foreach.hasNext),#end\n#end\n\
                ]"
        requestTemplates:
          application/json: "{\n  \"type\" : \"$input.params('type')\",\n  \"userId\"\
            \ : \"$context.authorizer.claims.sub\"\n}"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      parameters:
      - name: "type"
        in: "path"
        required: true
        schema:
          type: "string"
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
components:
  schemas:
    CompareData:
      title: "CompareData"
      required:
      - "age"
      - "height"
      - "income"
      type: "object"
      properties:
        income:
          type: "integer"
          format: "int32"
        age:
          type: "integer"
          format: "int32"
        height:
          type: "integer"
          format: "int32"
    Empty:
      title: "Empty Schema"
      type: "object"
    CompareDataArray:
      title: "CompareDataArray"
      type: "array"
      items:
        required:
        - "age"
        - "height"
        - "income"
        type: "object"
        properties:
          income:
            type: "integer"
            format: "int32"
          age:
            type: "integer"
            format: "int32"
          height:
            type: "integer"
            format: "int32"
  securitySchemes:
    compare-yourself-user-pool:
      type: "apiKey"
      name: "Authorization"
      in: "header"
      x-amazon-apigateway-authtype: "cognito_user_pools"
      x-amazon-apigateway-authorizer:
        providerARNs:
        - "arn:aws:cognito-idp:eu-north-1:392971033516:userpool/eu-north-1_lhbmRfObN"
        type: "cognito_user_pools"
x-amazon-apigateway-request-validators:
  Validate body:
    validateRequestParameters: false
    validateRequestBody: true
